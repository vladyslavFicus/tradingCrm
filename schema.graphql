# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type AnalyticsMutation {
  track(args: [Analytics__Input]): Boolean
}

type AsteriskMutation {
  createCall(field: String!, prefix: Int!, type: String!, uuid: String!): Boolean
}

type AuthMutation {
  addAuthority(department: String!, role: String!, uuid: String!): Boolean
  changeOperatorPassword(newPassword: String!, operatorUuid: String!): Boolean
  changePassword(clientUuid: String!, newPassword: String!): Boolean
  changeUnauthorizedPassword(currentPassword: String!, newPassword: String!, uuid: String!): Boolean
  chooseDepartment(brand: String!, department: String!, role: String!): ChooseDepartment
  logout: Boolean
  removeAuthority(department: String!, role: String!, uuid: String!): Boolean
  resetPassword(password: String!, token: String!): Boolean
  resetPermission(department: String!, role: String!): Boolean
  resetUserPassword(userUuid: String!): Boolean
  signIn(login: String!, password: String!): SignIn
  tokenRenew: TokenRenew
  unlockLogin(uuid: String!): Boolean
  updateAuthorityActions(actions: [String]!, department: String!, isPermitted: Boolean!, role: String!): Boolean
}

type Authority {
  brand: String!
  department: String!
  id: Int!
  role: String!
}

type BrandConfig {
  brandId: String
  brandName: String
  config: String
}

type BrandConfigMutation {
  create(brandId: String!, config: String!): Boolean
  update(brandId: String!, config: String!): Boolean
}

type BrandConfigProvider {
  affiliate: BrandConfigProvider__Affiliate
  clickToCall: BrandConfigProvider__ClickToCall
  clientPortal: BrandConfigProvider__ClientPortal
  currencies: BrandConfigProvider__Currencies
  email: BrandConfigProvider__Email
  env: String
  locales: BrandConfigProvider__Locales
  mt4: BrandConfigProvider__TradingProvider
  mt5: BrandConfigProvider__TradingProvider
  password: BrandConfigProvider__Password
  payment: BrandConfigProvider__Payment
  sms: BrandConfigProvider__Sms
  wet: BrandConfigProvider__TradingProvider
}

type BrandConfigProvider__Affiliate {
  restriction: BrandConfigProvider__Affiliate__Restriction
}

type BrandConfigProvider__Affiliate__Restriction {
  minFtdDeposit: Int
}

type BrandConfigProvider__Asterisk {
  isActive: Boolean
  prefixes: Object
}

type BrandConfigProvider__ClickToCall {
  asterisk: BrandConfigProvider__Asterisk
  commpeak: BrandConfigProvider__Commpeak
  coperato: BrandConfigProvider__Coperato
  isActive: Boolean
}

type BrandConfigProvider__ClientPortal {
  url: String
}

type BrandConfigProvider__Commpeak {
  isActive: Boolean
  prefixes: Object
}

type BrandConfigProvider__Coperato {
  isActive: Boolean
  prefixes: Object
}

type BrandConfigProvider__Currencies {
  base: String
  supported: [String]
}

type BrandConfigProvider__Email {
  templatedEmails: Boolean
}

type BrandConfigProvider__Locales {
  defaultLanguage: String
  languages: [String]
}

type BrandConfigProvider__Password {
  mt4: Object
  mt4_pattern: String
  mt5: Object
  pattern: String
}

type BrandConfigProvider__Payment {
  reasons: Object
}

type BrandConfigProvider__Sms {
  coperato: BrandConfigProvider__Sms__Coperato
}

type BrandConfigProvider__Sms__Coperato {
  isActive: Boolean
}

type BrandConfigProvider__TradingProvider {
  demo: BrandConfigProvider__TradingProvider__Settings
  leveragesChangingRequest: [Int]
  live: BrandConfigProvider__TradingProvider__Settings
}

type BrandConfigProvider__TradingProvider__Settings {
  enabled: Boolean
}

type Callback {
  _id: ID!
  callbackId: String!
  callbackTime: String!
  client: ProfileView
  creationTime: String!
  note: Note
  operator: Operator
  operatorId: String!
  reminder: String
  status: Callback__Status__Enum!
  updateTime: String!
  userId: String!
}

type CallbackMutation {
  create(callbackTime: String, operatorId: String!, reminder: String, userId: String!): Callback
  update(callbackId: String!, callbackTime: String, operatorId: String, reminder: String, status: Callback__Status__Enum): Callback
}

type ChooseDepartment {
  token: String
  uuid: String
}

type ClickToCallMutation {
  asterisk: AsteriskMutation
  commpeak: CommpeakMutation
  coperato: CoperatoMutation
  didlogic: DidLogicMutation
}

type ClientFile {
  attemptsLeft: Int
  documents: [Document]
  verificationType: String
}

type CommpeakMutation {
  createCall(field: String!, prefix: String!, type: String!, uuid: String!): Boolean
}

type CoperatoMutation {
  createCall(field: String!, prefix: String!, type: String!, uuid: String!): Boolean
}

type CoperatoSmsMutation {
  sendSms(field: String!, from: String!, message: String!, type: String!, uuid: String!): Boolean
}

type CoperatoSmsQuery {
  numbers: [CoperatoSms__Number]
}

type CoperatoSms__Number {
  country: String
  number: String
}

type DidLogicMutation {
  createCall(field: String!, type: String!, uuid: String!): Boolean
}

type DistributionRule {
  _id: ID!
  countries: [String]
  createdAt: String
  createdBy: String
  executionPeriodInHours: Int
  executionType: String
  firstTimeDeposit: Boolean
  languages: [String]
  lastNoteDateRange: DistributionRule__DateRange
  lastNotePeriodInHours: Int
  latestMigration: DistributionRule__LatestMigration
  name: String
  order: Int
  registrationDateRange: DistributionRule__DateRange
  registrationPeriodInHours: Int
  salesStatuses: [String]
  sourceBrandConfigs: [DistributionRule__SourceBrandConfig]
  status: String
  statusChangedAt: String
  targetBrandConfigs: [DistributionRule__TargetBrandConfig]
  targetSalesStatus: String
  updatedAt: String
  uuid: String!
}

type DistributionRuleMutation {
  create(ruleName: String!, ruleOrder: Int!): DistributionRule
  distributionRuleMigration(uuid: String!): Boolean
  migration(uuid: String!): Boolean
  update(ruleName: String, ruleOrder: Int, uuid: String!): Boolean
  updateRule(args: DistributionRuleUpdate__Input): Boolean
  updateRuleStatus(ruleStatus: String!, uuid: String!): Boolean
}

type DistributionRule__DateRange {
  from: String
  to: String
}

type DistributionRule__DistributionUnit {
  baseUnit: String
  quantity: Int
}

type DistributionRule__LatestMigration {
  clientsAmount: String
  ruleUuid: String
  startDate: String
  status: String
  uuid: String
}

type DistributionRule__SourceBrandConfig {
  affiliateUuids: [String]
  brand: String
  country: String
  desks: [String]
  distributionUnit: DistributionRule__DistributionUnit
  operator: String
  operatorEntity: Operator
  sortType: String
  teams: [String]
  uuid: String
}

type DistributionRule__TargetBrandConfig {
  affiliateUuid: String
  brand: String
  copyAffiliateSource: Boolean
  country: String
  desks: [String]
  distributionUnit: DistributionRule__DistributionUnit
  operator: String
  operatorEntity: Operator
  sortType: String
  teams: [String]
  uuid: String
}

type Document {
  documentType: String
  files: [File]
  verificationStatus: String
  verificationTime: String
  verifiedBy: String
}

type Email {
  id: ID!
  name: String
  subject: String
  text: String
}

type EmailTemplateMutation {
  createEmailTemplate(name: String!, subject: String!, text: String!): Boolean
  deleteEmailTemplate(id: ID!): Boolean
  sendEmail(field: String!, subject: String!, templateName: String, text: String!, type: String!, uuid: String!): Boolean
  updateEmailTemplate(id: ID!, name: String!, subject: String!, text: String!): Boolean
}

type Error {
  error: String
  errorParameters: Object
  fields_errors: Object
}

type Feed {
  authorFullName: String!
  authorUuid: String!
  brandId: String
  creationDate: String!
  details: String
  id: String
  ip: String
  targetFullName: String
  targetUuid: String!
  type: String!
  uuid: String
}

type File {
  _id: ID!
  brandId: String
  category: String
  client: ProfileView
  clientUuid: String!
  comment: String
  contentLength: Int
  documentType: String
  expirationDate: String
  fileName: String
  hidden: Boolean
  hiddenBy: String
  mediaType: String
  modificationDate: String
  modifiedBy: String
  name: String
  note: Note
  playerUUID: String!
  rejectedReason: String
  status: String
  targetUUID: String!
  title: String
  type: String
  uploadBy: String!
  uploadDate: String!
  uuid: String!
  verificationType: String
}

type FileMutation {
  confirmFilesUploading(documents: [FileUpload__Input], profileUuid: String!): Boolean
  delete(uuid: String!): Boolean
  updateFileMeta(documentType: String, status: String, title: String, uuid: String!, verificationType: String): Boolean
  updateFileStatus(documentType: String, uuid: String!, verificationStatus: String, verificationType: String): Boolean
  upload(file: Upload!, uuid: String): UploadedFile
}

type FilesCategories {
  ADDRESS_VERIFICATION: [String]
  DOCUMENT_VERIFICATION: [String]
  OTHER: [String]
}

type FilterSet {
  common: [FilterSet__Option]
  favourite: [FilterSet__Option]
}

type FilterSetMutation {
  create(favourite: Boolean!, fields: String!, name: String!, type: String!): FilterSet__Option
  delete(uuid: String!): Boolean
  update(fields: String!, name: String!, uuid: String!): Boolean
  updateFavourite(favourite: Boolean!, uuid: String!): Boolean
}

type FilterSet__Option {
  favourite: Boolean
  name: String!
  uuid: String!
}

type HierarchyBranch {
  branchType: String!
  brandId: String
  country: String
  defaultBranch: String
  defaultUser: String
  deskType: Desk__Types__Enum
  isDefault: Boolean
  language: String
  manager: String
  name: String!
  operator: Operator
  parentBranch: HierarchyBranch
  uuid: String!
}

type HierarchyBranchUser {
  operator: Operator
  uuid: String!
}

type HierarchyMutation {
  addBranchManager(branchUuid: String, operatorUuid: String): Boolean
  bulkUpdateAcquisitionStatus(acquisitionStatus: Desk__Types__Enum!, bulkSize: Int, searchParams: ClientSearch__Input, sorts: [Sort__Input], uuids: [String]!): Boolean
  bulkUpdateClientsAcquisition(bulkSize: Int, parentOperators: [String], retentionStatus: String, salesStatus: String, searchParams: ClientSearch__Input, sorts: [Sort__Input], uuids: [String]!): Boolean
  bulkUpdateLeadsAcquisition(bulkSize: Int, parentOperators: [String], salesStatus: String, searchParams: LeadSearch__Input, sorts: [Sort__Input], uuids: [String]!): Boolean
  createDesk(deskType: Desk__Types__Enum!, language: String!, name: String!, officeId: String!): Boolean
  createOffice(country: String!, name: String!): Boolean
  createTeam(deskId: String!, name: String!): Boolean
  deleteBranch(uuid: String!): Boolean
  removeBranchManager(branchUuid: String): Boolean
  updateAcquisition(parentOperator: String, retentionStatus: String, salesStatus: String, uuid: String!): Boolean
  updateBranch(country: String, deskType: Desk__Types__Enum, language: String, name: String!, uuid: String!): Boolean
}

type HierarchyTreeBranch {
  branchType: String
  brandId: String
  childrenCount: Int
  manager: Operator
  managerUuid: String
  name: String
  usersCount: Int
  uuid: String
}

type HierarchyTreeBranchResponse {
  children: [HierarchyTreeBranch]
  users: [HierarchyTreeUser]
}

type HierarchyTreeUser {
  operator: Operator
  uuid: String
}

type HierarchyUser {
  acquisition: HierarchyUserAcquisition
  fullName: String
  operator: Operator
  operatorStatus: String
  parentBranches: [HierarchyBranch]
  parentUsers: [HierarchyUser]
  statistics: HierarchyUser__statistics
  userType: String!
  uuid: String!
}

type HierarchyUserAcquisition {
  acquisitionStatus: String
  retentionOperator: Operator
  retentionRepresentative: String
  retentionStatus: String
  salesOperator: Operator
  salesRepresentative: String
  salesStatus: String
}

type HierarchyUserBranches {
  BRAND: [HierarchyBranch]
  COMPANY: [HierarchyBranch]
  DESK: [HierarchyBranch]
  OFFICE: [HierarchyBranch]
  TEAM: [HierarchyBranch]
}

type HierarchyUserBranchesTreeUp {
  branchType: String!
  brandId: String!
  name: String!
  parentBranch: HierarchyUserBranchesTreeUp
  uuid: String!
}

type HierarchyUserByType {
  BO_MANAGER: [HierarchyUser]
  BRAND_ADMIN: [HierarchyUser]
  COMPANY_ADMIN: [HierarchyUser]
  COMPLIANCE_MANAGER: [HierarchyUser]
  CUSTOMER: [HierarchyUser]
  DEALING_MANAGER: [HierarchyUser]
  LEAD_CUSTOMER: [HierarchyUser]
  OPERATIONS_MANAGER: [HierarchyUser]
  PSP_HOD: [HierarchyUser]
  PSP_MANAGER: [HierarchyUser]
  RETENTION_AGENT: [HierarchyUser]
  RETENTION_HOD: [HierarchyUser]
  RETENTION_LEAD: [HierarchyUser]
  RETENTION_MANAGER: [HierarchyUser]
  SALES_AGENT: [HierarchyUser]
  SALES_HOD: [HierarchyUser]
  SALES_LEAD: [HierarchyUser]
  SALES_MANAGER: [HierarchyUser]
  SUPPORT_AGENT: [HierarchyUser]
  SUPPORT_HOD: [HierarchyUser]
  SUPPORT_LEAD: [HierarchyUser]
  SUPPORT_MANAGER: [HierarchyUser]
}

type HierarchyUser__statistics {
  totalSubordinatesCount: Int
}

type Lead {
  _id: ID!
  acquisition: HierarchyUserAcquisition
  affiliate: String
  birthDate: String
  brandId: String!
  city: String
  convertedByOperatorUuid: String
  convertedToClientUuid: String
  country: String
  email: String!
  gender: String
  language: String
  lastNote: Note
  migrationId: String
  mobile: String
  name: String!
  phone: String!
  registrationDate: String!
  salesAgent: Operator
  salesStatus: SalesStatus__Enum
  source: String
  status: String
  statusChangedDate: String
  surname: String!
  uuid: String!
}

type LeadMutation {
  promote(args: PromoteLead__Input): Boolean
  update(birthDate: String, city: String, country: String, email: String, gender: String, mobile: String, name: String, phone: String, surname: String, uuid: String!): Boolean
  uploadLeads(file: Upload): LeadUploadResponse
}

type LeadUploadResponse {
  createdLeadsCount: Int
  failedLeads: [LeadUploadResponse__FailedLeads]
  failedLeadsCount: Int
}

type LeadUploadResponse__FailedLeads {
  affiliate: String
  birthDate: String
  city: String
  country: String
  email: String
  failureReason: String
  gender: String
  language: String
  mobile: String
  name: String
  phone: String
  salesAgent: String
  source: String
  surname: String
}

type LoginLock {
  lock: Boolean
  lockExpirationDate: String
  lockReason: String
}

type Mutation {
  analytics: AnalyticsMutation
  auth: AuthMutation
  brandConfig: BrandConfigMutation
  callback: CallbackMutation
  clickToCall: ClickToCallMutation
  distributionRule: DistributionRuleMutation
  emailTemplates: EmailTemplateMutation
  file: FileMutation
  filterSet: FilterSetMutation
  hierarchy: HierarchyMutation
  leads: LeadMutation
  note: NoteMutation
  notificationCenter: NotificationCenterMutation
  operator: OperatorMutation
  partner: PartnerMutation
  payment: PaymentMutation
  profile: ProfileMutation
  rule: RuleMutation
  sms: SmsMutation
  tradingAccount: TradingAccountMutation
  tradingActivity: TradingActivityMutation
  tradingEngine: TradingEngineMutation
  tradingEngineAdmin: TradingEngineAdminMutation
}

type Note {
  _id: ID!
  changedAt: String
  changedBy: String
  content: String
  noteId: String
  operator: Operator
  pinned: Boolean
  playerUUID: String
  subject: String
  targetType: String
  targetUUID: String
  uuid: String
}

type NoteMutation {
  add(content: String!, pinned: Boolean, playerUUID: String!, subject: String, targetType: String!, targetUUID: String!): Note
  remove(noteId: String!): Note
  update(content: String!, noteId: String!, pinned: Boolean, subject: String, targetUUID: String): Note
}

type NotificationCenter {
  agent: Operator
  client: ProfileView
  createdAt: String
  details: Object
  priority: String
  read: Boolean
  subtype: String
  type: String
  uuid: String
}

type NotificationCenterConfiguration {
  showNotificationsPopUp: Boolean
}

type NotificationCenterMutation {
  update(excUuids: [String], incUuids: [String], searchParams: NotificationCenterSearch__Input, totalElements: Int!): Boolean
  updateConfiguration(showNotificationsPopUp: Boolean): Boolean
}

type Operator {
  _id: ID!
  authorities(brand: String): [Authority]
  clickToCall: Operator__ClickToCall
  country: String
  email: String
  firstName: String
  fullName: String
  hierarchy: HierarchyUser
  lastName: String
  operatorStatus: String
  phoneNumber: String
  registeredBy: String
  registrationDate: String
  statusChangeAuthor: String
  statusChangeDate: String
  statusReason: String
  uuid: String
}

type OperatorMutation {
  addExistingOperator(branchId: String, department: String!, email: String!, role: String!): Operator
  addOperatorToBranch(branchId: String!, operatorId: String!): Boolean
  changeStatus(reason: String!, status: String!, uuid: String!): Boolean
  createOperator(branchId: String, department: String!, email: String!, firstName: String!, lastName: String!, password: String!, phone: String, role: String!, userType: String!): Operator
  removeOperatorFromBranch(branchId: String!, operatorId: String!): Boolean
  updateOperator(clickToCall: OperatorUpdate__ClickToCall__Input, country: String, firstName: String!, lastName: String!, phoneNumber: String, uuid: String!): Operator
  updateOperatorUserType(operatorId: String!, userType: String): Boolean
}

type OperatorRelationsCount {
  customersCount: Int
  leadsCount: Int
  rulesCount: Int
}

type Operator__ClickToCall {
  asteriskPhone: String
  commpeakPhone: String
  coperatoPhone: String
  didlogicPhone: String
}

type Pageable__Callback {
  content: [Callback]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__DistributionRule {
  content: [DistributionRule]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__Feed {
  content: [Feed]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__File {
  content: [File]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__Lead {
  content: [Lead]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__Note {
  content: [Note]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__NotificationCenter {
  content: [NotificationCenter]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__Operator {
  content: [Operator]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__Partner {
  content: [Partner]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__Payment {
  content: [Payment]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__ProfileView {
  content: [ProfileView]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__TradingAccount {
  content: [TradingAccount]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__TradingActivity {
  content: [TradingActivity]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__TradingEngineAccount {
  content: [TradingEngineAccount]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__TradingEngineHistory {
  content: [TradingEngineHistory]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__TradingEngineOrder {
  content: [TradingEngineOrder]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Pageable__TradingEngineTransaction {
  content: [TradingEngineTransaction]
  last: Boolean!
  number: Int
  page: Int!
  size: Int!
  totalElements: Int
  totalPages: Int
}

type Partner {
  _id: ID!
  authorities: [Authority]
  brand: String
  cdeAffiliate: Boolean
  country: String
  createdAt: String
  createdBy: String
  email: String
  externalAffiliateId: String
  firstName: String
  fullName: String
  lastName: String
  permission: Partner__PermissionType
  phone: String
  public: Boolean
  schedule: [Partner__Schedule]
  status: String
  statusChangeAuthor: String
  statusChangeDate: String
  uuid: String
}

type PartnerMutation {
  changePartnerAccountStatus(reason: String!, status: String!, uuid: String!): Boolean
  changeScheduleStatus(affiliateUuid: String!, data: [PartnerScheduleStatus__Input]): Boolean
  createPartner(email: String!, externalAffiliateId: String, firstName: String!, lastName: String!, password: String!, phone: String, public: Boolean): Partner
  createSchedule(activated: Boolean, affiliateUuid: String!, countrySpreads: [PartnerSchedule__Input], day: String, totalLimit: Int, workingHoursFrom: String, workingHoursTo: String): Boolean
  updatePartner(cdeAffiliate: Boolean, country: String, email: String, externalAffiliateId: String, firstName: String!, lastName: String!, permission: PartnerPermission__Input, phone: String, public: Boolean, uuid: String!): Boolean
}

type Partner__PermissionType {
  allowedIpAddresses: [String]
  cumulativeDeposit: Boolean
  forbiddenCountries: [String]
  minFtdDeposit: Float
  showAutologinUrl: Boolean
  showFTDAmount: Boolean
  showKycStatus: Boolean
  showNotes: Boolean
  showSalesStatus: Boolean
}

type Partner__Schedule {
  activated: Boolean
  configId: String
  countrySpreads: [Partner__Schedule__CountrySpreads]
  day: String
  totalLimit: Int
  workingHoursFrom: String
  workingHoursTo: String
}

type Partner__Schedule__CountrySpreads {
  country: String
  limit: Int
}

type Payment {
  _id: ID!
  accountType: String!
  accountUUID: String
  agentBranches: [String]
  agentId: String
  agentName: String
  amount: String
  bankName: String
  brandId: String
  country: String
  createdBy: String
  creationTime: String!
  cryptoAmount: String
  cryptoCurrency: String
  currency: String
  declineReason: String
  exchangeRate: String
  expirationDate: String
  externalReference: String
  firstTimeDeposit: Boolean
  language: String
  linkedTransactionId: String
  login: String!
  maskedPan: String
  modifiedBy: String
  moto: Boolean
  normalizedAmount: String
  note: Note
  originalAgent: Operator
  partner: Partner
  paymentAggregator: String
  paymentId: String!
  paymentMetadata: Payment__Metadata
  paymentMethod: String
  paymentMigrationId: String
  paymentType: String!
  platformType: String!
  playerProfile: Payment__ClientProfile
  status: String!
  statusChangedAt: String
  updatedAt: String
  userMigrationId: String
  warnings: [String]
  withdrawStatus: String
}

type PaymentMutation {
  acceptPayment(declineReason: String, paymentId: String!, paymentMethod: String, typeAcc: String!): Boolean
  changeCreationTime(creationTime: String!, paymentId: String!): Boolean
  changeOriginalAgent(agentId: String, agentName: String, paymentId: String!): Boolean
  changePaymentMethod(paymentId: String!, paymentMethod: String): Boolean
  changePaymentStatus(paymentId: String!, paymentStatus: String): Boolean
  createPayment(accountUUID: String, amount: Float!, country: String, expirationDate: String, externalReference: String, login: Int, paymentMethod: String, paymentType: String!, profileUUID: String, source: String, target: String): Payment
  disableShowFtdToAffiliate(profileUuid: String!): Boolean
  enableShowFtdToAffiliate(profileUuid: String!): Boolean
}

type PaymentStatistic {
  additionalTotal: PaymentStatistic__AdditionalTotal
  items: [PaymentStatistic__Entry]
  itemsTotal: PaymentStatistic__Total
}

type PaymentStatistic__AdditionalTotal {
  monthAmount: Float
  monthCount: Int
  todayAmount: Float
  todayCount: Int
  totalAmount: Float
  totalCount: Int
}

type PaymentStatistic__Entry {
  amount: Float
  count: Int
  entryDate: String
}

type PaymentStatistic__Total {
  totalAmount: Float
  totalCount: Int
}

type Payment__ClientProfile {
  affiliateUuid: String
  country: String
  firstName: String
  lastName: String
  uuid: String
}

type Payment__Metadata {
  clientIp: String
  country: String
  mobile: Boolean
  userAgent: String
}

type Profile {
  _id: ID!
  acquisition: HierarchyUserAcquisition
  address: Profile__Address
  affiliate: Profile__Affiliate
  age: String
  birthDate: String
  brandId: String
  clientType: String
  configuration: Profile__Configuration
  contacts: Profile__Contacts
  convertedFromLeadUuid: String
  emailVerified: Boolean
  firstName: String
  gender: String
  identificationNumber: String
  kyc: Profile__KYC
  kycNote: Note
  languageCode: String
  lastName: String
  lastUpdatedBy: String
  lastUpdatedDate: String
  migrationId: String
  passport: Profile__Passport
  phoneVerified: Boolean
  profileVerified: Boolean
  profileView: ProfileView
  referrer: Profile__Referrer
  registrationDetails: Profile__RegistrationDetails
  status: Profile__Status
  timeZone: String
  tradingAccounts: [TradingAccount]
  uuid: String
  verifications: [String]
}

type ProfileMutation {
  changeProfileStatus(comment: String, playerUUID: String!, reason: String!, status: String!): Profile
  createProfile(args: CreateProfile__Input): Boolean
  updateAddress(address: String, city: String, countryCode: String, playerUUID: String!, poBox: String, postCode: String, state: String): Profile
  updateConfiguration(crs: Boolean, fatca: Boolean, internalTransfer: Boolean, playerUUID: String!): Boolean
  updateContacts(additionalEmail: String, additionalPhone: String, email: String, phone: String, playerUUID: String!): Profile
  updateEmail(email: String, playerUUID: String!): Profile
  updateKYCStatus(kycStatus: String, playerUUID: String!): Boolean
  updatePersonalInformation(birthDate: String, firstName: String, gender: String, identificationNumber: String, languageCode: String, lastName: String, passport: Passport__Input, playerUUID: String!, timeZone: String): Profile
  verifyEmail(playerUUID: String!): Profile
  verifyPhone(playerUUID: String!): Profile
}

type ProfileView {
  acquisition: HierarchyUserAcquisition
  address: ProfileView__Address
  affiliate: ProfileView__Affiliate
  balance: ProfileView__Balance
  firstName: String
  fullName: String
  languageCode: String!
  lastActivity: ProfileView__LastActivity
  lastName: String
  lastNote: Note
  lastSignInSessions: [ProfileView__Sessions]
  online: Boolean
  paymentDetails: ProfileView__PaymentDetails
  referrer: ProfileView__Referrer
  registrationDetails: ProfileView__RegistrationDetails
  status: ProfileView__Status
  uuid: String!
  warnings: [String]
}

type ProfileView__Address {
  countryCode: String
}

type ProfileView__Affiliate {
  campaignId: String
  ftd: ProfileView__Affiliate__FTD
  partner: Partner
  source: String
  uuid: String
}

type ProfileView__Affiliate__FTD {
  amount: Float
  currency: String
  isVisible: Boolean
  time: String
}

type ProfileView__Balance {
  amount: String
  credit: String
  currency: String
}

type ProfileView__LastActivity {
  application: String
  date: String
  eventType: String
  eventValue: String
  location: String
}

type ProfileView__PaymentDetails {
  depositsCount: Int
  lastDepositTime: String
}

type ProfileView__Referrer {
  fullName: String
  uuid: String
}

type ProfileView__RegistrationDetails {
  registeredBy: String
  registrationDate: String
}

type ProfileView__Sessions {
  countryCode: String
  ip: String
  startedAt: String
}

type ProfileView__Status {
  changedAt: String
  type: String
}

type Profile__Address {
  address: String
  city: String
  countryCode: String
  poBox: String
  postCode: String
  state: String
}

type Profile__Affiliate {
  campaignId: String
  externalId: String
  partner: Partner
  referral: String
  sms: String
  source: String
  uuid: String
}

type Profile__Configuration {
  crs: Boolean
  fatca: Boolean
  gdpr: Profile__Configuration__GDPR
  internalTransfer: Boolean
  subscription: Profile__Configuration__SPAM
  webCookies: Profile__Configuration__WEBCOOKIE
}

type Profile__Configuration__GDPR {
  email: Boolean
  phone: Boolean
  sms: Boolean
  socialMedia: Boolean
}

type Profile__Configuration__SPAM {
  educational: Boolean
  information: Boolean
  marketNews: Boolean
  promosAndOffers: Boolean
  statisticsAndSummary: Boolean
}

type Profile__Configuration__WEBCOOKIE {
  enabled: Boolean
}

type Profile__Contacts {
  additionalEmail: String
  additionalPhone: String
  email: String
  phone: String
}

type Profile__KYC {
  status: String
  uuid: ID
}

type Profile__Passport {
  countryOfIssue: String
  countrySpecificIdentifier: String
  countrySpecificIdentifierType: String
  expirationDate: String
  issueDate: String
  number: String
}

type Profile__Phone__Contacts {
  additionalEmail: String
  additionalPhone: String
  email: String
  phone: String
}

type Profile__Referrer {
  fullName: String
  uuid: String
}

type Profile__RegistrationDetails {
  deviceDetails: Profile__RegistrationDetails__Device
  inetDetails: Profile__RegistrationDetails__Inet
  locationDetails: Profile__RegistrationDetails__Location
  registeredBy: String
  registrationDate: String
  userAgent: String
}

type Profile__RegistrationDetails__Device {
  deviceType: String
  operatingSystem: String
}

type Profile__RegistrationDetails__Inet {
  host: String
  ipAddress: String
  referer: String
}

type Profile__RegistrationDetails__Location {
  city: String
  countryCode: String
  region: String
}

type Profile__Status {
  changedAt: String
  changedBy: String
  comment: String
  reason: String
  type: String
}

type Query {
  allActions: [String]
  authoritiesOptions: Object
  authorityActions(department: String!, role: String!): [String]
  branch(branchType: String!, country: String, deskType: Desk__Types__Enum, deskUuid: String, keyword: String, officeUuid: String): [HierarchyBranch]
  branchChildren(uuid: String!): [HierarchyBranch]
  branchInfo(branchId: String!): HierarchyBranch
  branchUsers(branchUuid: String!): [HierarchyBranchUser]
  brandConfig(brandId: String!): BrandConfig
  brandToAuthorities: Object
  brands: [BrandConfig]
  callback(id: String!): Callback
  callbacks(callbackTimeFrom: String, callbackTimeTo: String, limit: Int, page: Int, searchKeyword: String, statuses: [Callback__Status__Enum], userId: String): Pageable__Callback
  cdePartners: [Partner]
  clientFiles(clientUuid: String!, fileCategory: String, page: Int, searchBy: String, size: Int, uploadDateFrom: String, uploadDateTo: String): [ClientFile]
  clientPayments(args: PaymentSearch__Input): Pageable__Payment
  clientTradingAccounts(accountType: String, platformType: String, profileUUID: String!): [TradingAccount]
  config(brandId: String!): BrandConfigProvider
  distributionClientsAmount(uuid: String): Int
  distributionRule(uuid: String!): DistributionRule
  distributionRuleClientsAmount(affiliateUuids: [String], countries: [String]!, desks: [String], executionPeriodInHours: Int, firstTimeDeposit: Boolean, languages: [String]!, lastNoteDateRange: DistributionRule__DateRange__Input, lastNotePeriodInHours: Int, registrationDateRange: DistributionRule__DateRange__Input, registrationPeriodInHours: Int, salesStatuses: [String]!, sourceBrand: String!, targetBrand: String, teams: [String]): Int
  distributionRules(args: DistributionRuleSearch__Input): Pageable__DistributionRule
  emailTemplate(id: ID!): Email
  emailTemplates: [Email]
  feedTypes(uuid: String!): Object
  feeds(auditLogType: String, creationDateFrom: String, creationDateTo: String, limit: Int, page: Int, searchBy: String, sortColumn: String, sortDirection: String, targetUUID: String): Pageable__Feed
  files(documentType: String, page: Int, searchBy: String, size: Int, targetUuid: String, uploadedDateFrom: String, uploadedDateTo: String, verificationType: String): Pageable__File
  filesCategories: FilesCategories
  filterSet(uuid: String!): Object
  filterSets(type: FilterSet__Types__Enum): FilterSet
  isDefaultAuthority(department: String!, role: String!): Boolean
  lead(uuid: String!): Lead
  leads(args: LeadSearch__Input): Pageable__Lead
  loginLock(uuid: String!): LoginLock
  manualPaymentMethods: [String]
  notes(changedAtFrom: String, changedAtTo: String, department: String, page: Int, pinned: Boolean, size: Int, targetType: String, targetUUID: String!): Pageable__Note
  notificationCenter(args: NotificationCenterSearch__Input): Pageable__NotificationCenter
  notificationCenterConfiguration: NotificationCenterConfiguration
  notificationCenterTypes: Object
  notificationCenterUnread: Int
  operator(uuid: String!): Operator
  operatorRelationsCount(uuid: String!): OperatorRelationsCount
  operators(country: String, page: Page__Input, phone: String, registrationDateFrom: String, registrationDateTo: String, searchBy: String, status: String): Pageable__Operator
  operatorsByBrand(brandId: String!, hierarchyTypeGroup: Desk__Types__Enum!): [Operator]
  operatorsSubordinates(hierarchyTypeGroup: String, onlyActive: Boolean): [Operator]
  partner(uuid: String!): Partner
  partners(brandId: String, country: String, page: Page__Input, registrationDateFrom: String, registrationDateTo: String, searchBy: String, status: String): Pageable__Partner
  paymentMethods: [String]
  payments(args: PaymentSearch__Input): Pageable__Payment
  paymentsStatistic(additionalStatistics: [PaymentStatisticDateRange__Input], dateFrom: String, dateTo: String, detalization: StatisticDetalization__Enum, paymentStatus: String, paymentType: String, profileId: String): PaymentStatistic
  permission: [String]
  profile(playerUUID: String!): Profile
  profileContacts(playerUUID: String!): Profile__Phone__Contacts
  profiles(args: ClientSearch__Input): Pageable__ProfileView
  referrals(uuid: String!): [Referral]
  referrerStatistics(uuid: String!): ReferrerStatistics
  registrationStatistic(additionalStatistics: [RegistrationStatisticDateRange__Input], dateFrom: String, dateTo: String, detalization: StatisticDetalization__Enum): RegistrationStatistic
  rules(affiliateId: String, branchUuid: String, country: String, createdByOrUuid: String, language: String, name: String, operatorUuids: [String], parentId: String, type: Rule__Type__Enum, uuid: [String], uuids: [String]): [Rule]
  sms: SmsQuery
  tradingAccounts(accountType: String, archived: Boolean, page: Page__Input, platformType: String, searchKeyword: String): Pageable__TradingAccount
  tradingActivity(agentIds: [String], closeTimeEnd: String, closeTimeStart: String, limit: Int, loginIds: [Int], openTimeEnd: String, openTimeStart: String, operationType: TradingActivity__OperationTypes__Enum, page: Int, platformType: String, profileUUID: String, sortColumn: String, sortDirection: String, status: TradingActivity__Statuses__Enum, symbol: String, tradeId: Int, tradeType: String, volumeFrom: Float, volumeTo: Float): Pageable__TradingActivity
  tradingEngineAccount(identifier: String): TradingEngineAccount
  tradingEngineAccountStatistic(accountUuid: String!): TradingEngineAccountStatistic
  tradingEngineAccountSymbols(accountUuid: String!): [TradingEngineAccountSymbol]
  tradingEngineAccounts(args: TradingEngineSearch__Input): Pageable__TradingEngineAccount
  tradingEngineGroups: [TradingEngineGroup]
  tradingEngineHistory(args: TradingEngineHistorySearch__Input): Pageable__TradingEngineHistory
  tradingEngineOrder(orderId: Int!): TradingEngineOrder
  tradingEngineOrders(args: TradingEngineSearch__Input): Pageable__TradingEngineOrder
  tradingEngineSymbol(symbol: String!): TradingEngineSymbol
  tradingEngineSymbolPrices(size: Int, symbol: String!): [TradingEngineSymbolPrice]
  tradingEngineSymbols: [TradingEngineSymbol]
  tradingEngineTransactions(args: TradingEngineTransactionSearch__Input): Pageable__TradingEngineTransaction
  treeBranch(uuid: String!): HierarchyTreeBranchResponse
  treeTop: [HierarchyTreeBranch]
  userBranches(brandId: String, withoutBrandFilter: Boolean): HierarchyUserBranches
  userBranchesTreeUp(userUUID: String!): [HierarchyUserBranchesTreeUp]
  userHierarchy: HierarchyUser
  userHierarchyById(uuid: String!): HierarchyUser
}

type Referral {
  acquisition: HierarchyUserAcquisition
  bonusType: Referral__BonusType__Enum
  ftdInfo: Referral__FTD
  referralInfo: Referral__Info
  remuneration: Referral__Remuneration
}

type Referral__FTD {
  amount: Float
  currency: String
  date: String
  normalizedAmount: Float
}

type Referral__Info {
  countryCode: String
  languageCode: String
  name: String
  profileUuid: String
  registrationDate: String
}

type Referral__Remuneration {
  amount: Float
  currency: String
  date: String
  normalizedAmount: Float
}

type ReferrerStatistics {
  ftdCount: Int
  referralsCount: Int
  remunerationTotalAmount: Float
}

type RegistrationStatistic {
  additionalStatistics: RegistrationStatistic__Additional
  registrations: [RegistrationStatistic__Item]
}

type RegistrationStatistic__Additional {
  month: RegistrationStatistic__Additional__Field
  today: RegistrationStatistic__Additional__Field
  total: RegistrationStatistic__Additional__Field
}

type RegistrationStatistic__Additional__Field {
  value: Int
}

type RegistrationStatistic__Item {
  entries: Int
  entryDate: String
}

type Rule {
  brandId: String
  countries: [String]
  createdAt: String
  createdBy: String
  deletedAt: String
  enableSchedule: Boolean
  languages: [String]
  name: String
  operatorSpreads: [Rule__OperatorSpread]
  parentBranch: String
  partners: [Partner]
  priority: Int!
  schedules: [RuleSchedule]
  sources: [String]
  type: Rule__Type__Enum
  updatedBy: String
  uuid: String!
}

type RuleMutation {
  createRule(affiliateUUIDs: [String], countries: [String], enableSchedule: Boolean, languages: [String], name: String!, operatorSpreads: [RuleOperatorSpread__Input], parentBranch: String, priority: Int!, schedules: [RuleSchedule__Input], sources: [String], type: Rule__Type__Enum, uuid: String): Boolean
  deleteRule(uuid: String!): Boolean
}

type RuleSchedule {
  days: [String]
  timeIntervals: [RuleTimeInterval]
}

type RuleTimeInterval {
  operatorSpreads: [Rule__OperatorSpread]
  timeFrom: String
  timeTo: String
}

type Rule__OperatorSpread {
  operator: Operator
  parentUser: String
  percentage: Int
}

type SignIn {
  brandToAuthorities: Object
  token: String
  uuid: String
}

type SmsMutation {
  coperato: CoperatoSmsMutation
}

type SmsQuery {
  coperato: CoperatoSmsQuery
}

type TokenRenew {
  token: String
}

type TradingAccount {
  accountType: String
  accountUUID: String
  affiliate: TradingAccount__Affiliate
  archived: Boolean
  balance: Float
  brandId: String
  closedTradeAmount: Float
  closedTradeProfit: Float
  createdAt: String
  createdBy: String
  credit: Float
  currency: String
  equity: Float
  group: String
  lastLeverageChangeRequest: TradingAccount__LastLeverageChangeRequest
  leverage: String
  login: Int!
  margin: Float
  name: String
  operator: Operator
  platformType: String
  profile: TradingAccount__Profile
  profileUUID: String
  readOnly: Boolean
  readOnlyUpdateTime: String
  readOnlyUpdatedBy: String
  serverId: Int
  uuid: String
}

type TradingAccountMutation {
  approveChangingLeverage(accountUUID: String!): Boolean
  changeLeverage(accountUUID: String!, leverage: Int!): Boolean
  changePassword(accountUUID: String!, password: String!, profileUUID: String!): Boolean
  create(accountType: String!, amount: Float, currency: String!, name: String!, password: String!, platformType: String!, profileId: String!): Boolean
  rejectChangingLeverage(accountUUID: String!): Boolean
  rename(accountUUID: String!, name: String!): Boolean
  toggleDisabled(accountUUID: String!, readOnly: Boolean!): Boolean
}

type TradingAccount__Affiliate {
  source: String
}

type TradingAccount__LastLeverageChangeRequest {
  changeLeverageFrom: String
  changeLeverageTo: String
  createDate: String
  status: String
}

type TradingAccount__Profile {
  fullName: String
  uuid: String
}

type TradingActivity {
  closePrice: Float
  closeRate: Float
  closeTime: Int
  comment: String
  commission: Float
  commissionAgent: Float
  digits: Int
  expiration: Int
  id: ID!
  login: Int!
  magic: Int
  openPrice: Float
  openRate: Float
  openTime: Int
  operationType: TradingActivity__OperationTypes__Enum
  originalAgent: Operator
  platformType: String
  profit: Float
  reason: String
  stopLoss: Float
  swap: Float
  symbol: String
  takeProfit: Float
  taxes: Float
  timestamp: Int
  tradeId: Int!
  tradeStatus: String
  tradeType: String
  volume: Float
}

type TradingActivityMutation {
  changeOriginalAgent(agentId: String!, platformType: String, tradeId: Int!): Boolean
}

type TradingEngineAccount {
  _id: ID!
  accountType: String
  allowedSymbols: [TradingEngineAccountSymbol]
  balance: Float
  comment: String
  credit: Float
  currency: String
  enable: Boolean
  equity: Float
  freeMargin: Float
  group: String
  leverage: Int
  login: Int
  margin: Float
  name: String
  profileFullName: String
  profileUuid: String
  readOnly: Boolean
  registrationDate: String
  serverId: Int
  uuid: String!
}

type TradingEngineAccountStatistic {
  balance: Float
  credit: Float
  depositsSum: Float
  equity: Float
  freeMargin: Float
  margin: Float
  marginLevel: Float
  openPnl: Float
  withdrawalsSum: Float
}

type TradingEngineAccountSymbol {
  description: String!
  digits: Int
  groupSpread(group: String, identifier: String): TradingEngineGroupSpread
  lotSize: Int
  name: String!
}

type TradingEngineAdminMutation {
  editOrder(args: TradingEngineEditOrderAdmin__Input): Boolean
  reopenOrder(orderId: Int!): Boolean
}

type TradingEngineCredit {
  accountUuid: String
  balance: Float
  credit: Float
}

type TradingEngineGroup {
  groupName: String
}

type TradingEngineGroupSpread {
  askAdjustment: Float
  bidAdjustment: Float
  groupName: String
  symbol: String
}

type TradingEngineHistory {
  accountLogin: Int
  closePrice: Float
  closingTime: String
  deletedAt: String
  id: Int
  openPrice: Float
  openingTime: String
  profit: Float
  status: String
  stopLoss: Float
  swaps: Float
  symbol: String
  takeProfit: Float
  type: String
  volume: Float
}

type TradingEngineMutation {
  activatePendingOrder(activationPrice: Float!, orderId: Int!): Boolean
  closeOrder(closePrice: Float, orderId: Int!, volume: Float): Boolean
  createCreditIn(accountUuid: String!, amount: Float!, comment: String): TradingEngineCredit
  createCreditOut(accountUuid: String!, amount: Float!, comment: String): TradingEngineCredit
  createOrder(accountUuid: String!, comment: String, direction: String!, openPrice: Float, stopLoss: Float, symbol: String!, takeProfit: Float, type: String!, volumeLots: Float!): TradingEngineOrder
  deleteOrder(orderId: Int!): Boolean
  editOrder(comment: String, openPrice: Float, orderId: Int!, stopLoss: Float, takeProfit: Float): Boolean
  updateAccountGroup(accountUuid: String!, group: String): TradingEngineAccount
  updateAccountLeverage(accountUuid: String!, leverage: Int): TradingEngineAccount
  updateAccountReadonly(accountUuid: String!, readOnly: Boolean): TradingEngineAccount
}

type TradingEngineOrder {
  account: TradingEngineAccount
  accountLogin: Int
  accountUuid: String
  closePrice: Float
  closeRate: Float
  comment: String
  commission: Float
  digits: Float
  direction: String
  group: String
  groupSpread: TradingEngineGroupSpread
  id: Int
  leverage: Int
  lotSize: Float
  margin: Float
  marginRate: Float
  openPrice: Float
  openRate: Float
  pnl: TradingEngineOrder__Pnl
  reason: String
  status: String
  stopLoss: Float
  swaps: Float
  symbol: String
  symbolAlias: String
  symbolEntity: TradingEngineSymbol
  takeProfit: Float
  time: TradingEngineOrder__Time
  tradeId: String
  tradeStatus: String
  tradeType: String
  type: TradingEngine__OperationTypes__Enum
  volumeLots: Float
  volumeUnits: Float
}

type TradingEngineOrder__Pnl {
  gross: Float
  net: Float
}

type TradingEngineOrder__Time {
  closing: String
  creation: String
  expiration: String
  modification: String
}

type TradingEngineSymbol {
  ask: Float
  bid: Float
  digits: Float
  groupSpread(group: String, identifier: String): TradingEngineGroupSpread
  long: Float
  lotSize: Float
  name: String
  securities: String
  short: Float
  spread: String
  stop: Float
}

type TradingEngineSymbolPrice {
  ask: Float!
  bid: Float!
  name: String!
  time: String!
}

type TradingEngineTransaction {
  accountLogin: Int
  amount: Float
  comment: String
  createdAt: String
  id: ID
  type: String
}

type UploadedFile {
  fileUuid: String!
}

enum Callback__Status__Enum {
  PENDING
  REJECTED
  SUCCESS
}

enum Desk__Types__Enum {
  RETENTION
  SALES
}

enum FilterSet__Types__Enum {
  CLIENT
  LEAD
  PAYMENT
}

enum Referral__BonusType__Enum {
  FTD
  REGISTRATION
}

enum Rule__Type__Enum {
  LEAD
  PROFILE
}

enum SalesStatus__Enum {
  CALLBACK
  CONVERTED
  DEPOSITOR
  DO_NOT_CALL
  DUPLICATE
  FAILED_DEPOSIT
  INITIAL_CALL
  INVALID_COUNTRY
  INVALID_LANGUAGE
  NEVER_ANSWER
  NEW
  NO_ANSWER
  NO_ANSWER_2
  NO_ANSWER_3
  NO_ANSWER_4
  NO_ANSWER_5
  NO_INTEREST
  NO_MONEY
  POTENTIAL_HIGH
  POTENTIAL_LOW
  REASSIGN
  TEST
  UNDER_18
  VOICEMAIL
  WRONG_INFO
  WRONG_NUMBER
}

enum StatisticDetalization__Enum {
  PER_DAYS
  PER_HOURS
  PER_MINUTES
}

enum TradingActivity__OperationTypes__Enum {
  OP_BUY
  OP_BUY_LIMIT
  OP_BUY_MARKET
  OP_BUY_STOP
  OP_BUY_STOP_LIMIT
  OP_CREDIT
  OP_SELL
  OP_SELL_LIMIT
  OP_SELL_MARKET
  OP_SELL_STOP
  OP_SELL_STOP_LIMIT
}

enum TradingActivity__Statuses__Enum {
  CLOSED
  OPEN
  PENDING
}

enum TradingEngine__OperationTypes__Enum {
  BUY
  BUY_LIMIT
  BUY_MARKET
  BUY_STOP
  BUY_STOP_LIMIT
  CREDIT
  SELL
  SELL_LIMIT
  SELL_MARKET
  SELL_STOP
  SELL_STOP_LIMIT
}

input Analytics__Input {
  application: String
  device: String
  dimension: String
  eventAction: String
  eventLabel: String
  eventType: String
  eventValue: String
  location: String
  referer: String
  version: String
}

input ClientSearch__Input {
  acquisitionStatus: String
  activityStatus: String
  affiliateUuids: [String]
  assignStatus: String
  affiliateFtd: Boolean
  affiliateFtdDateRange: ClientSearch__Input__AffiliateFTDDateRange
  balanceRange: ClientSearch__Input__Balance
  countries: [String]
  depositsCountRange: ClientSearch__Input__Deposit
  desks: [String]
  firstDepositDateRange: ClientSearch__Input__FirstDepositDateRange
  firstNoteDateRange: ClientSearch__Input__FirstNoteDateRange
  firstTimeDeposit: Boolean
  isReferrered: Boolean
  kycStatuses: [String]
  languages: [String]
  lastLoginDateRange: ClientSearch__Input__LastLoginDateRange
  lastModificationDateRange: ClientSearch__Input__LastModificationDateRange
  lastNoteDateRange: ClientSearch__Input__LastNoteDateRange
  lastTradeDateRange: ClientSearch__Input__LastTradeDateRange
  migrationId: String
  operators: [String]
  page: Page__Input
  registrationDateRange: ClientSearch__Input__RegistrationDateRange
  representativeUuids: [String]
  requestId: String
  retentionStatuses: [String]
  salesStatuses: [String]
  searchByAffiliateIdentifiers: String
  searchByIdentifiers: String
  searchLimit: Int
  statuses: [String]
  teams: [String]
  warnings: [String]
}

input ClientSearch__Input__Balance {
  from: Float
  to: Float
}

input ClientSearch__Input__Deposit {
  from: Int
  to: Int
}

input ClientSearch__Input__FirstDepositDateRange {
  from: String
  to: String
}

input ClientSearch__Input__FirstNoteDateRange {
  from: String
  to: String
}

input ClientSearch__Input__LastLoginDateRange {
  from: String
  to: String
}

input ClientSearch__Input__LastModificationDateRange {
  from: String
  to: String
}

input ClientSearch__Input__LastNoteDateRange {
  from: String
  to: String
}

input ClientSearch__Input__LastTradeDateRange {
  from: String
  to: String
}

input ClientSearch__Input__RegistrationDateRange {
  from: String
  to: String
}

input ClientSearch__Input__AffiliateFTDDateRange {
  from: String
  to: String
}

input CreateProfile__Address__Input {
  address: String
  city: String
  countryCode: String
  postCode: String
  state: String
}

input CreateProfile__Affiliate__Input {
  referral: String
  sms: String
  source: String
}

input CreateProfile__Configuration__Input {
  crs: Boolean
  fatca: Boolean
  internalTransfer: Boolean
}

input CreateProfile__Contacts__Input {
  additionalEmail: String
  additionalPhone: String
  email: String
  phone: String
}

input CreateProfile__Input {
  address: CreateProfile__Address__Input
  affiliate: CreateProfile__Affiliate__Input
  birthDate: String
  brandId: String
  configuration: CreateProfile__Configuration__Input
  contacts: CreateProfile__Contacts__Input
  firstName: String
  gender: String
  languageCode: String
  lastName: String
  password: String
}

input DistributionRuleSearch__Input {
  affiliateUuids: [String]
  countries: [String]
  createdDateFrom: String
  createdDateTo: String
  executionPeriodsInHours: [Int]
  firstTimeDeposit: Boolean
  fromBrand: String
  languages: [String]
  lastTimeExecutedFrom: String
  lastTimeExecutedTo: String
  page: Int
  ruleStatus: String
  salesStatuses: [String]
  searchParam: String
  size: Int
  toBrand: String
}

input DistributionRuleUpdate__Input {
  countries: [String]
  executionPeriodInHours: Int
  executionType: String
  firstTimeDeposit: Boolean
  languages: [String]
  lastNoteDateRange: DistributionRule__DateRange__Input
  lastNotePeriodInHours: Int
  registrationDateRange: DistributionRule__DateRange__Input
  registrationPeriodInHours: Int
  ruleName: String
  salesStatuses: [String]
  sourceBrandConfig: DistributionRuleUpdate__SourceBrand__Input
  targetBrandConfig: DistributionRuleUpdate__TargetBrand__Input
  targetSalesStatus: String
  uuid: String!
}

input DistributionRuleUpdate__SourceBrand__Input {
  affiliateUuids: [String]
  brand: String
  desks: [String]
  distributionUnit: DistributionRuleUpdate__Unit__Input
  sortType: String
  teams: [String]
}

input DistributionRuleUpdate__TargetBrand__Input {
  affiliateUuid: String
  brand: String
  copyAffiliateSource: Boolean
  country: String
  distributionUnit: DistributionRuleUpdate__Unit__Input
  operator: String
}

input DistributionRuleUpdate__Unit__Input {
  baseUnit: String
  quantity: Int
}

input DistributionRule__DateRange__Input {
  from: String
  to: String
}

input FileUpload__Input {
  comment: String
  documentType: String!
  expirationDate: String
  fileUuid: String!
  title: String!
  verificationType: String!
}

input LeadSearch__Input {
  countries: [String]
  desks: [String]
  languages: [String]
  lastNoteDateFrom: String
  lastNoteDateTo: String
  migrationId: String
  page: Page__Input
  registrationDateEnd: String
  registrationDateStart: String
  requestId: String
  salesAgents: [String]
  salesStatuses: [String]
  searchKeyword: String
  searchLimit: Int
  status: String
  teams: [String]
  uuids: [String]
}

input NotificationCenterSearch__DateRange__Input {
  from: String
  to: String
}

input NotificationCenterSearch__Input {
  creationDateRange: NotificationCenterSearch__DateRange__Input
  hierarchical: Boolean
  notificationSubtypes: [String]
  notificationTypes: [String]
  operatorDesks: [String]
  operatorTeams: [String]
  operators: [String]
  page: Page__Input
  priorities: [String]
  read: Boolean
  searchKeyword: String
}

input OperatorUpdate__ClickToCall__Input {
  asteriskPhone: String
  commpeakPhone: String
  coperatoPhone: String
  didlogicPhone: String
}

input Page__Input {
  from: Int
  size: Int
  sorts: [Sort__Input]
}

input PartnerPermission__Input {
  allowedIpAddresses: [String]
  cumulativeDeposit: Boolean
  forbiddenCountries: [String]
  minFtdDeposit: Float
  showAutologinUrl: Boolean
  showFTDAmount: Boolean
  showKycStatus: Boolean
  showNotes: Boolean
  showSalesStatus: Boolean
}

input PartnerScheduleStatus__Input {
  activated: Boolean
  day: String
}

input PartnerSchedule__Input {
  country: String
  limit: Int
}

input Passport__Input {
  countryOfIssue: String
  countrySpecificIdentifier: String
  countrySpecificIdentifierType: String
  expirationDate: String
  issueDate: String
  number: String
}

input PaymentSearch__Input {
  accountType: String
  affiliateUuids: [String]
  agentIds: [String]
  amountFrom: Float
  amountTo: Float
  countries: [String]
  creationTimeFrom: String
  creationTimeTo: String
  currency: String
  desks: [String]
  firstTimeDeposit: Boolean
  modificationTimeFrom: String
  modificationTimeTo: String
  page: Page__Input
  paymentAggregator: String
  paymentMethods: [String]
  paymentTypes: [String]
  platformType: String
  profileId: String
  requestId: String
  searchParam: String
  statusChangedTimeFrom: String
  statusChangedTimeTo: String
  statuses: [String]
  teams: [String]
  type: String
  warnings: [String]
}

input PaymentStatisticDateRange__Input {
  dateFrom: String
  dateTo: String
}

input PromoteLead__Address__Input {
  address: String
  city: String
  countryCode: String
  postCode: String
  state: String
}

input PromoteLead__Affiliate__Input {
  referral: String
  sms: String
  source: String
}

input PromoteLead__Configuration__Input {
  crs: Boolean
  fatca: Boolean
  internalTransfer: Boolean
}

input PromoteLead__Input {
  address: PromoteLead__Address__Input
  affiliate: PromoteLead__Affiliate__Input
  birthDate: String
  brandId: String
  configuration: PromoteLead__Configuration__Input
  firstName: String
  gender: String
  languageCode: String
  lastName: String
  password: String
  uuid: String!
}

input RegistrationStatisticDateRange__Input {
  from: String
  to: String
}

input RuleOperatorSpread__Input {
  parentUser: String
  percentage: Int
}

input RuleScheduleTimeInterval__Input {
  operatorSpreads: [RuleOperatorSpread__Input]
  timeFrom: String
  timeTo: String
}

input RuleSchedule__Input {
  days: [String]
  timeIntervals: [RuleScheduleTimeInterval__Input]
}

input Sort__Input {
  column: String
  direction: String
}

input TradingEngineEditOrderAdmin__Input {
  closePrice: Float
  closeTime: String
  comment: String
  commission: Float
  openPrice: Float
  openTime: String
  orderId: Int!
  reason: String
  stopLoss: Float
  swaps: Float
  symbol: String
  takeProfit: Float
  type: String
  volume: Float
}

input TradingEngineHistorySearch__Input {
  accountLogin: Int
  accountUuid: String
  closingDateRange: TradingEngineSearch__Time__Input
  keyword: String
  openingDateRange: TradingEngineSearch__Time__Input
  page: Page__Input
  symbol: String
  type: String
}

input TradingEngineSearch__Input {
  accountUuid: String
  closingDateRange: TradingEngineSearch__Time__Input
  enabled: Boolean
  groups: [String]
  keyword: String
  openingDateRange: TradingEngineSearch__Time__Input
  orderId: Int
  orderStatuses: [String]
  orderType: String
  page: Page__Input
  symbol: String
}

input TradingEngineSearch__Time__Input {
  from: String
  to: String
}

input TradingEngineTransactionSearch__Input {
  accountLogin: Int
  accountUuid: String
  creationDateRange: TradingEngineSearch__Time__Input
  keyword: String
  openingDateRange: TradingEngineSearch__Time__Input
  page: Page__Input
  transactionType: String
}


scalar Object

scalar Upload
